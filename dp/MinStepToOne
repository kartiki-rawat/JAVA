package DP;

public class MinStepToOne {
	public static int countSteps(int n) {
	if(n==1) {
		return 0;
	}
	int op1 = countSteps(n-1);
	int minSteps = op1;
	if(n%2==0) {
		int op2 = countSteps(n/2);
		if(op2<minSteps) {
			minSteps = op2;
		}
		
	}
	if(n%3==0) {
		int op3 = countSteps(n/3);
		if(op3<minSteps) {
			minSteps = op3;
		}
	}
	return 1+minSteps;
	}
	
	
	//top down approach memorization
	public static int countStepsM(int n) {
		int storage[] =  new int [n+1];
		return countStepsM(n,storage);
	}


	private static int countStepsM(int n, int[] storage) {
		// TODO Auto-generated method stub
		if(n==1) {
			storage[n] = 0;
			return storage [n];
		}
		if(storage[n]!=0) {
			return storage[n];
		}
		int op1 = countStepsM(n-1,storage);
		int minSteps = op1;
		if(n%2==0) {
			int op2 = countStepsM(n/2,storage);
			if(op2<minSteps) {
				minSteps = op2;
			}
			
		}
		if(n%3==0) {
			int op3 = countStepsM(n/3 ,storage);
			if(op3<minSteps) {
				minSteps = op3;
			}
		}
		storage[n] = 1+minSteps;
		return storage[n];
		}
	
	//dp bottom approach
	public static int countStepsDP(int n) {
		int storage[] =  new int [n+ 1];
		storage [1] = 0;
		for(int i = 2;i<=n;i++) {
			int min = storage[i-1];
			if(i%2==0) {
				if(min>storage[i/2]) {
					min = storage[i/2];
				}
				
			}
			if(i%3==0) {
				if(min>storage[i/3]) {
					min = storage[i/3];
				}
			}
			storage[i] = 1+min;
			
		}
		return storage[n];
	
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n =1000;
		System.out.println(countStepsDP(n)); // very goog approach
		System.out.println(countSteps(n));
		System.out.println(countStepsM(n));
		

	}

}
